// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-05-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --template=./.maintain/frame-weight-template.hbs
// --output=./frame/contracts/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn call_with_code_per_byte(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_is_contract(r: u32, ) -> Weight;
	fn seal_code_hash(r: u32, ) -> Weight;
	fn seal_own_code_hash(r: u32, ) -> Weight;
	fn seal_caller_is_origin(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight;
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_contains_storage(r: u32, ) -> Weight;
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight;
	fn seal_take_storage(r: u32, ) -> Weight;
	fn seal_take_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_delegate_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn seal_ecdsa_recover(r: u32, ) -> Weight;
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight;
	fn seal_set_code_hash(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(1_743_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(11_705_000 as Weight)
			// Standard Error: 0
			.saturating_add((759_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(7_564_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_964_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	fn reinstrument(c: u32, ) -> Weight {
		(23_123_000 as Weight)
			// Standard Error: 0
			.saturating_add((48_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		(204_171_000 as Weight)
			// Standard Error: 0
			.saturating_add((52_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(297_360_000 as Weight)
			// Standard Error: 0
			.saturating_add((122_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn instantiate(s: u32, ) -> Weight {
		(185_847_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(149_514_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn upload_code(c: u32, ) -> Weight {
		(50_665_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(30_636_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	fn set_code() -> Weight {
		(28_246_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(206_348_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((39_979_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_is_contract(r: u32, ) -> Weight {
		(101_000_000 as Weight)
			// Standard Error: 729_000
			.saturating_add((316_343_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_code_hash(r: u32, ) -> Weight {
		(113_271_000 as Weight)
			// Standard Error: 704_000
			.saturating_add((373_895_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_own_code_hash(r: u32, ) -> Weight {
		(208_677_000 as Weight)
			// Standard Error: 69_000
			.saturating_add((43_545_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		(203_712_000 as Weight)
			// Standard Error: 45_000
			.saturating_add((16_643_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_address(r: u32, ) -> Weight {
		(206_948_000 as Weight)
			// Standard Error: 53_000
			.saturating_add((39_873_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(208_287_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((39_419_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_balance(r: u32, ) -> Weight {
		(212_057_000 as Weight)
			// Standard Error: 164_000
			.saturating_add((121_895_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(209_479_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((39_196_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(207_037_000 as Weight)
			// Standard Error: 71_000
			.saturating_add((39_369_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_block_number(r: u32, ) -> Weight {
		(207_422_000 as Weight)
			// Standard Error: 64_000
			.saturating_add((39_199_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(205_054_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((39_682_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(212_670_000 as Weight)
			// Standard Error: 147_000
			.saturating_add((103_050_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas(r: u32, ) -> Weight {
		(133_466_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((19_357_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input(r: u32, ) -> Weight {
		(208_466_000 as Weight)
			// Standard Error: 50_000
			.saturating_add((38_728_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(270_187_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((9_520_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return(r: u32, ) -> Weight {
		(201_339_000 as Weight)
			// Standard Error: 878_000
			.saturating_add((3_882_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(203_431_000 as Weight)
			// Standard Error: 0
			.saturating_add((185_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(204_148_000 as Weight)
			// Standard Error: 455_000
			.saturating_add((59_154_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(212_577_000 as Weight)
			// Standard Error: 161_000
			.saturating_add((139_093_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(224_854_000 as Weight)
			// Standard Error: 198_000
			.saturating_add((257_693_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:80 w:80)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(463_584_000 as Weight)
			// Standard Error: 1_589_000
			.saturating_add((259_656_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 313_000
			.saturating_add((67_817_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_debug_message(r: u32, ) -> Weight {
		(140_706_000 as Weight)
			// Standard Error: 48_000
			.saturating_add((31_821_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(86_170_000 as Weight)
			// Standard Error: 655_000
			.saturating_add((345_083_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		(544_891_000 as Weight)
			// Standard Error: 201_000
			.saturating_add((21_263_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		(559_272_000 as Weight)
			// Standard Error: 254_000
			.saturating_add((8_934_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(111_035_000 as Weight)
			// Standard Error: 582_000
			.saturating_add((327_920_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		(548_058_000 as Weight)
			// Standard Error: 189_000
			.saturating_add((8_653_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(140_373_000 as Weight)
			// Standard Error: 347_000
			.saturating_add((263_644_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(496_647_000 as Weight)
			// Standard Error: 283_000
			.saturating_add((49_867_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(84 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage(r: u32, ) -> Weight {
		(144_515_000 as Weight)
			// Standard Error: 369_000
			.saturating_add((237_922_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		(453_855_000 as Weight)
			// Standard Error: 188_000
			.saturating_add((7_974_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(84 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage(r: u32, ) -> Weight {
		(115_561_000 as Weight)
			// Standard Error: 562_000
			.saturating_add((357_360_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		(586_051_000 as Weight)
			// Standard Error: 255_000
			.saturating_add((50_993_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().writes(83 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_transfer(r: u32, ) -> Weight {
		(156_467_000 as Weight)
			// Standard Error: 1_239_000
			.saturating_add((1_570_781_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_029_000
			.saturating_add((14_696_973_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_delegate_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 5_775_000
			.saturating_add((14_638_005_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads((79 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		(9_143_547_000 as Weight)
			// Standard Error: 13_771_000
			.saturating_add((1_446_396_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 5_000
			.saturating_add((9_582_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().reads((81 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(81 as Weight))
			.saturating_add(T::DbWeight::get().writes((81 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 33_080_000
			.saturating_add((20_985_939_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((320 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((320 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		(12_485_517_000 as Weight)
			// Standard Error: 40_501_000
			.saturating_add((581_811_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 19_000
			.saturating_add((122_784_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(167 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(165 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(206_349_000 as Weight)
			// Standard Error: 65_000
			.saturating_add((59_743_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(350_042_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((317_660_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(204_692_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((72_275_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(259_922_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((243_137_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(206_357_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((49_966_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(256_283_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((94_093_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(203_988_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((50_306_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(245_141_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((94_171_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		(236_769_000 as Weight)
			// Standard Error: 481_000
			.saturating_add((3_037_811_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		(221_636_000 as Weight)
			// Standard Error: 861_000
			.saturating_add((2_027_579_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	fn seal_set_code_hash(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_583_000
			.saturating_add((808_734_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads((79 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((79 as Weight).saturating_mul(r as Weight)))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(74_090_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((605_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(74_076_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_318_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(74_046_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_403_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(73_904_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_767_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(73_844_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_953_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(73_791_000 as Weight)
			// Standard Error: 0
			.saturating_add((929_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(73_696_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_420_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(73_490_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_580_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(76_078_000 as Weight)
			// Standard Error: 0
			.saturating_add((5_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(75_293_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((6_986_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(88_366_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((8_969_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(97_543_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((496_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(74_451_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((625_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(74_291_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((688_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(74_405_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((907_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(76_736_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_170_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(76_682_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_357_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(74_212_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((661_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(73_579_000 as Weight)
			// Standard Error: 52_000
			.saturating_add((179_687_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(73_980_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((889_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(73_991_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((888_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(74_001_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((889_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(73_924_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((901_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(74_281_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((858_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(74_137_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((862_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(74_138_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((879_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(73_823_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_351_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(74_022_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_346_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(73_808_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_352_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(73_864_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_350_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(73_982_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_346_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(73_895_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_360_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(73_834_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_350_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(73_963_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(74_122_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_342_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(73_804_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_352_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(73_907_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_327_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(73_800_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_331_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(73_873_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_328_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(73_833_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_000_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(74_148_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_079_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(73_810_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_016_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(73_808_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_054_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(73_991_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_324_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(73_722_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_331_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(73_991_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_325_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(73_900_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_349_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(73_877_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_348_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(73_931_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_348_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(73_975_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_347_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(73_805_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_352_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(1_743_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(11_705_000 as Weight)
			// Standard Error: 0
			.saturating_add((759_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(7_564_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_964_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	fn reinstrument(c: u32, ) -> Weight {
		(23_123_000 as Weight)
			// Standard Error: 0
			.saturating_add((48_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		(204_171_000 as Weight)
			// Standard Error: 0
			.saturating_add((52_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(297_360_000 as Weight)
			// Standard Error: 0
			.saturating_add((122_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn instantiate(s: u32, ) -> Weight {
		(185_847_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(149_514_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn upload_code(c: u32, ) -> Weight {
		(50_665_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(30_636_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	fn set_code() -> Weight {
		(28_246_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(206_348_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((39_979_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_is_contract(r: u32, ) -> Weight {
		(101_000_000 as Weight)
			// Standard Error: 729_000
			.saturating_add((316_343_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_code_hash(r: u32, ) -> Weight {
		(113_271_000 as Weight)
			// Standard Error: 704_000
			.saturating_add((373_895_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_own_code_hash(r: u32, ) -> Weight {
		(208_677_000 as Weight)
			// Standard Error: 69_000
			.saturating_add((43_545_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		(203_712_000 as Weight)
			// Standard Error: 45_000
			.saturating_add((16_643_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_address(r: u32, ) -> Weight {
		(206_948_000 as Weight)
			// Standard Error: 53_000
			.saturating_add((39_873_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(208_287_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((39_419_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_balance(r: u32, ) -> Weight {
		(212_057_000 as Weight)
			// Standard Error: 164_000
			.saturating_add((121_895_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(209_479_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((39_196_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(207_037_000 as Weight)
			// Standard Error: 71_000
			.saturating_add((39_369_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_block_number(r: u32, ) -> Weight {
		(207_422_000 as Weight)
			// Standard Error: 64_000
			.saturating_add((39_199_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(205_054_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((39_682_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(212_670_000 as Weight)
			// Standard Error: 147_000
			.saturating_add((103_050_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas(r: u32, ) -> Weight {
		(133_466_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((19_357_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input(r: u32, ) -> Weight {
		(208_466_000 as Weight)
			// Standard Error: 50_000
			.saturating_add((38_728_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(270_187_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((9_520_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return(r: u32, ) -> Weight {
		(201_339_000 as Weight)
			// Standard Error: 878_000
			.saturating_add((3_882_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(203_431_000 as Weight)
			// Standard Error: 0
			.saturating_add((185_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(204_148_000 as Weight)
			// Standard Error: 455_000
			.saturating_add((59_154_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(212_577_000 as Weight)
			// Standard Error: 161_000
			.saturating_add((139_093_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(224_854_000 as Weight)
			// Standard Error: 198_000
			.saturating_add((257_693_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:80 w:80)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(463_584_000 as Weight)
			// Standard Error: 1_589_000
			.saturating_add((259_656_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 313_000
			.saturating_add((67_817_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_debug_message(r: u32, ) -> Weight {
		(140_706_000 as Weight)
			// Standard Error: 48_000
			.saturating_add((31_821_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(86_170_000 as Weight)
			// Standard Error: 655_000
			.saturating_add((345_083_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		(544_891_000 as Weight)
			// Standard Error: 201_000
			.saturating_add((21_263_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		(559_272_000 as Weight)
			// Standard Error: 254_000
			.saturating_add((8_934_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(111_035_000 as Weight)
			// Standard Error: 582_000
			.saturating_add((327_920_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		(548_058_000 as Weight)
			// Standard Error: 189_000
			.saturating_add((8_653_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(140_373_000 as Weight)
			// Standard Error: 347_000
			.saturating_add((263_644_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(496_647_000 as Weight)
			// Standard Error: 283_000
			.saturating_add((49_867_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(84 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage(r: u32, ) -> Weight {
		(144_515_000 as Weight)
			// Standard Error: 369_000
			.saturating_add((237_922_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		(453_855_000 as Weight)
			// Standard Error: 188_000
			.saturating_add((7_974_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(84 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage(r: u32, ) -> Weight {
		(115_561_000 as Weight)
			// Standard Error: 562_000
			.saturating_add((357_360_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		(586_051_000 as Weight)
			// Standard Error: 255_000
			.saturating_add((50_993_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().writes(83 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_transfer(r: u32, ) -> Weight {
		(156_467_000 as Weight)
			// Standard Error: 1_239_000
			.saturating_add((1_570_781_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_029_000
			.saturating_add((14_696_973_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_delegate_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 5_775_000
			.saturating_add((14_638_005_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads((79 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		(9_143_547_000 as Weight)
			// Standard Error: 13_771_000
			.saturating_add((1_446_396_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 5_000
			.saturating_add((9_582_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().reads((81 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(81 as Weight))
			.saturating_add(RocksDbWeight::get().writes((81 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 33_080_000
			.saturating_add((20_985_939_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((320 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((320 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		(12_485_517_000 as Weight)
			// Standard Error: 40_501_000
			.saturating_add((581_811_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 19_000
			.saturating_add((122_784_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(167 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(165 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(206_349_000 as Weight)
			// Standard Error: 65_000
			.saturating_add((59_743_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(350_042_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((317_660_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(204_692_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((72_275_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(259_922_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((243_137_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(206_357_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((49_966_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(256_283_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((94_093_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(203_988_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((50_306_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(245_141_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((94_171_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		(236_769_000 as Weight)
			// Standard Error: 481_000
			.saturating_add((3_037_811_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		(221_636_000 as Weight)
			// Standard Error: 861_000
			.saturating_add((2_027_579_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	fn seal_set_code_hash(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_583_000
			.saturating_add((808_734_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads((79 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((79 as Weight).saturating_mul(r as Weight)))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(74_090_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((605_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(74_076_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_318_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(74_046_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_403_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(73_904_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_767_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(73_844_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_953_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(73_791_000 as Weight)
			// Standard Error: 0
			.saturating_add((929_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(73_696_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_420_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(73_490_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_580_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(76_078_000 as Weight)
			// Standard Error: 0
			.saturating_add((5_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(75_293_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((6_986_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(88_366_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((8_969_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(97_543_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((496_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(74_451_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((625_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(74_291_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((688_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(74_405_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((907_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(76_736_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_170_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(76_682_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_357_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(74_212_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((661_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(73_579_000 as Weight)
			// Standard Error: 52_000
			.saturating_add((179_687_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(73_980_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((889_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(73_991_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((888_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(74_001_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((889_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(73_924_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((901_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(74_281_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((858_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(74_137_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((862_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(74_138_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((879_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(73_823_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_351_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(74_022_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_346_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(73_808_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_352_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(73_864_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_350_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(73_982_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_346_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(73_895_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_360_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(73_834_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_350_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(73_963_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(74_122_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_342_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(73_804_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_352_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(73_907_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_327_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(73_800_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_331_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(73_873_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_328_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(73_833_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_000_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(74_148_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_079_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(73_810_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_016_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(73_808_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_054_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(73_991_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_324_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(73_722_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_331_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(73_991_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_325_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(73_900_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_349_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(73_877_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_348_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(73_931_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_348_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(73_975_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_347_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(73_805_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_352_000 as Weight).saturating_mul(r as Weight))
	}
}
